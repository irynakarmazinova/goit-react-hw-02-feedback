{"version":3,"sources":["components/FeedbackOptions/FeedbackOptions.js","components/Statistics/Statistics.js","components/Feedback/Feedback.js","components/Section/Section.js","components/Notification/Notification.js","App.js","index.js"],"names":["FeedbackOptions","onGood","onNeutral","onBad","onTotal","onCountTotalFeedback","onPositivePercentage","onCountPositiveFeedbackPercentage","className","onClick","Statistics","Feedback","state","good","props","initialValue","neutral","bad","total","positivePercentage","setState","prevActualState","countTotalFeedback","e","countPositiveFeedbackPercentage","console","log","target","this","React","Component","defaultProps","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0UA8BeA,EA3BS,SAAC,GAAD,IACtBC,EADsB,EACtBA,OACAC,EAFsB,EAEtBA,UACAC,EAHsB,EAGtBA,MAHsB,EAItBC,QAJsB,EAKtBC,qBALsB,EAMtBC,qBANsB,EAOtBC,kCAPsB,OAStB,gCACE,oBAAIC,UAAU,kBAAd,sBACA,uDACA,wBAAQA,UAAU,MAAMC,QAASR,EAAjC,kBAGA,wBAAQO,UAAU,MAAMC,QAASP,EAAjC,qBAGA,wBAAQM,UAAU,MAAMC,QAASN,EAAjC,qBCiBWO,G,MAnCI,SAAC,GAAD,IACjBT,EADiB,EACjBA,OACAC,EAFiB,EAEjBA,UACAC,EAHiB,EAGjBA,MACAC,EAJiB,EAIjBA,QAEAE,GANiB,EAKjBD,qBALiB,EAMjBC,sBANiB,EAOjBC,kCAPiB,OASjB,8BACE,gCACE,4CACA,uCAAUN,KACV,0CAAaC,KACb,sCAASC,KACT,wCACUC,KAGV,oDACsBE,EADtB,OAKA,yDCrBAK,E,4MAQJC,MAAQ,CACNC,KAAM,EAAKC,MAAMC,aACjBC,QAAS,EAAKF,MAAMC,aACpBE,IAAK,EAAKH,MAAMC,aAChBG,MAAO,EAAKJ,MAAMC,aAClBI,mBAAoB,EAAKL,MAAMC,c,EAGjCF,KAAO,WAEL,EAAKO,UAAS,SAAAC,GAAe,MAAK,CAChCR,KAAMQ,EAAgBR,KAAO,O,EAGjCG,QAAU,WACR,EAAKI,UAAS,SAAAC,GAAe,MAAK,CAChCL,QAASK,EAAgBL,QAAU,O,EAGvCC,IAAM,WACJ,EAAKG,UAAS,SAAAC,GACZ,MAAO,CAAEJ,IAAKI,EAAgBJ,IAAM,O,EAGxCC,MAAQ,WACN,EAAKE,UAAS,SAAAC,GACZ,MAAO,CAAEH,MAAOG,EAAgBH,MAAQ,O,EAG5CC,mBAAqB,WACnB,EAAKC,UAAS,SAAAC,GACZ,MAAO,CAAEF,mBAAoBE,EAAgBF,mBAAqB,O,EAMtEG,mBAAqB,SAAAC,GAInB,EAAKH,UAAS,SAAAC,GACZ,MAAO,CACLH,MACEG,EAAgBR,KAAOQ,EAAgBL,QAAUK,EAAgBJ,S,EAMzEO,gCAAkC,SAAAD,GAChCE,QAAQC,IAAIH,EAAEI,S,4CAGhB,WACE,OACE,gCACE,cAAC,EAAD,CACE1B,OAAQ2B,KAAKf,KACbX,UAAW0B,KAAKZ,QAChBb,MAAOyB,KAAKX,IACZb,QAASwB,KAAKV,MACdb,qBAAsBuB,KAAKN,mBAC3BhB,qBAAsBsB,KAAKT,mBAC3BZ,kCACEqB,KAAKJ,kCAIT,cAAC,EAAD,CACEvB,OAAQ2B,KAAKhB,MAAMC,KACnBX,UAAW0B,KAAKhB,MAAMI,QACtBb,MAAOyB,KAAKhB,MAAMK,IAClBb,QAASwB,KAAKhB,MAAMM,MACpBb,qBAAsBuB,KAAKhB,MAAMM,MACjCZ,qBAAsBsB,KAAKhB,MAAMO,mBACjCZ,kCACEqB,KAAKJ,yC,GArFMK,IAAMC,WAAvBnB,EACGoB,aAAe,CACpBhB,aAAc,GAyHHJ,QC9HOkB,IAAMC,UCDDD,IAAMC,UCoBlBE,MAhBf,WACE,OACE,8BACE,cAAC,EAAD,OCDNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.465ea2cf.chunk.js","sourcesContent":["import React from 'react';\r\nimport './feedbackOptions.scss';\r\n\r\nconst FeedbackOptions = ({\r\n  onGood,\r\n  onNeutral,\r\n  onBad,\r\n  onTotal,\r\n  onCountTotalFeedback,\r\n  onPositivePercentage,\r\n  onCountPositiveFeedbackPercentage,\r\n}) => (\r\n  <div>\r\n    <h1 className=\"visually_hidden\">Feedback</h1>\r\n    <h2>Please leave feedback</h2>\r\n    <button className=\"btn\" onClick={onGood}>\r\n      Good\r\n    </button>\r\n    <button className=\"btn\" onClick={onNeutral}>\r\n      Neutral\r\n    </button>\r\n    <button className=\"btn\" onClick={onBad}>\r\n      Bad\r\n    </button>\r\n  </div>\r\n);\r\n\r\n// options = {};\r\n// onLeaveFeedback = {};\r\n\r\nexport default FeedbackOptions;\r\n","import React from 'react';\r\nimport './statistics.scss';\r\n\r\nconst Statistics = ({\r\n  onGood,\r\n  onNeutral,\r\n  onBad,\r\n  onTotal,\r\n  onCountTotalFeedback,\r\n  onPositivePercentage,\r\n  onCountPositiveFeedbackPercentage,\r\n}) => (\r\n  <div>\r\n    <div>\r\n      <h2>Statistics</h2>\r\n      <p>Good: {onGood}</p>\r\n      <p>Neutral: {onNeutral}</p>\r\n      <p>Bad: {onBad}</p>\r\n      <p>\r\n        Total: {onTotal}\r\n        {/* {onCountTotalFeedback} */}\r\n      </p>\r\n      <p>\r\n        Positive feedback: {onPositivePercentage}\r\n        {/* {onCountPositiveFeedbackPercentage} */}%\r\n      </p>\r\n\r\n      <p>No feedback given</p>\r\n    </div>\r\n  </div>\r\n);\r\n\r\n// good={}\r\n// neutral = {}\r\n// bad = {}\r\n// total = {}\r\n// positivePercentage = {}\r\n\r\nexport default Statistics;\r\n","import React from 'react';\r\nimport '../../sass/utils/visually-hidden.scss';\r\nimport FeedbackOptions from '../FeedbackOptions/FeedbackOptions';\r\nimport Statistics from 'components/Statistics/Statistics';\r\n\r\n//  блок кнопок\r\nclass Feedback extends React.Component {\r\n  static defaultProps = {\r\n    initialValue: 0,\r\n  };\r\n\r\n  // static propTypes = {};\r\n\r\n  // состояние. публичное свойство state. свойство экземпляра, всегда объект. от свойств этого объекта зависит разметка\r\n  state = {\r\n    good: this.props.initialValue,\r\n    neutral: this.props.initialValue,\r\n    bad: this.props.initialValue,\r\n    total: this.props.initialValue,\r\n    positivePercentage: this.props.initialValue,\r\n  };\r\n\r\n  good = () => {\r\n    // prevActualState - ссылка на актуальное состояние на момент обновления, вызова этой функции\r\n    this.setState(prevActualState => ({\r\n      good: prevActualState.good + 1,\r\n    }));\r\n  };\r\n  neutral = () => {\r\n    this.setState(prevActualState => ({\r\n      neutral: prevActualState.neutral + 1,\r\n    }));\r\n  };\r\n  bad = () => {\r\n    this.setState(prevActualState => {\r\n      return { bad: prevActualState.bad + 1 };\r\n    });\r\n  };\r\n  total = () => {\r\n    this.setState(prevActualState => {\r\n      return { total: prevActualState.total + 1 };\r\n    });\r\n  };\r\n  positivePercentage = () => {\r\n    this.setState(prevActualState => {\r\n      return { positivePercentage: prevActualState.positivePercentage + 1 };\r\n    });\r\n  };\r\n\r\n  // подсчитывающие эти значения основываясь на данных в состоянии (вычисляемые данные)\r\n  // общего количества собранных отзывов из всех категорий\r\n  countTotalFeedback = e => {\r\n    // console.log(e.target);\r\n\r\n    // prevActualState - ссылка на актуальное состояние на момент обновления, вызова этой функции\r\n    this.setState(prevActualState => {\r\n      return {\r\n        total:\r\n          prevActualState.good + prevActualState.neutral + prevActualState.bad,\r\n      };\r\n    });\r\n  };\r\n\r\n  // процент положительных отзывов\r\n  countPositiveFeedbackPercentage = e => {\r\n    console.log(e.target);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <FeedbackOptions\r\n          onGood={this.good}\r\n          onNeutral={this.neutral}\r\n          onBad={this.bad}\r\n          onTotal={this.total}\r\n          onCountTotalFeedback={this.countTotalFeedback}\r\n          onPositivePercentage={this.positivePercentage}\r\n          onCountPositiveFeedbackPercentage={\r\n            this.countPositiveFeedbackPercentage\r\n          }\r\n        />\r\n\r\n        <Statistics\r\n          onGood={this.state.good}\r\n          onNeutral={this.state.neutral}\r\n          onBad={this.state.bad}\r\n          onTotal={this.state.total}\r\n          onCountTotalFeedback={this.state.total}\r\n          onPositivePercentage={this.state.positivePercentage}\r\n          onCountPositiveFeedbackPercentage={\r\n            this.countPositiveFeedbackPercentage\r\n          }\r\n        />\r\n\r\n        {/* <div>\r\n          <h1 className=\"visually_hidden\">Feedback</h1>\r\n          <h2>Please leave feedback</h2>\r\n          <button className=\"btn\" onClick={this.state.good}>\r\n            Good\r\n          </button>\r\n          <button className=\"btn\" onClick={this.state.neutral}>\r\n            Neutral\r\n          </button>\r\n          <button className=\"btn\" onClick={this.state.bad}>\r\n            Bad\r\n          </button>\r\n        </div>\r\n        <div>\r\n          <h2>Statistics</h2>\r\n          <p>Good: {this.state.good}</p>\r\n          <p>Neutral: {this.state.neutral}</p>\r\n          <p>Bad: {this.state.bad}</p>\r\n          <p>\r\n            Total: {this.countTotalFeedback}\r\n            {this.state.total}\r\n          </p>\r\n          <p>\r\n            Positive feedback: {this.countPositiveFeedbackPercentage}\r\n            {this.state.positivePercentage}%\r\n          </p>\r\n\r\n          <p>No feedback given</p>\r\n        </div> */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Feedback;\r\n// ---------------------------------------------------\r\n// метод класса\r\n// countPositiveFeedbackPercentage() {}-нет привязки контекста\r\n// публичное свойство и стрелка\r\n//   countPositiveFeedbackPercentage = () => {}\r\n\r\n//super-это вызов контсруктора родителя(React.Component), до того как использовать this внутри конструктора ребенка(this.state = {};)\r\n","import React from 'react';\r\n\r\n// рендерит секцию с заголовком и детей (children)\r\nclass Section extends React.Component {\r\n  render() {\r\n    return <div></div>;\r\n  }\r\n\r\n  title = '';\r\n}\r\n\r\nexport default Section;\r\n","import React from 'react';\r\n\r\nclass Notification extends React.Component {\r\n  render() {\r\n    return <div></div>;\r\n  }\r\n\r\n  message = 'No feedback given';\r\n}\r\n\r\nexport default Notification;\r\n","import Feedback from './components/Feedback/Feedback';\nimport FeedbackOptions from './components/FeedbackOptions/FeedbackOptions';\nimport Statistics from 'components/Statistics/Statistics';\nimport Section from 'components/Section/Section';\nimport Notification from 'components/Notification/Notification';\n\nfunction App() {\n  return (\n    <div>\n      <Feedback />\n\n      {/* <Section> */}\n      {/* <FeedbackOptions /> */}\n      {/* </Section> */}\n\n      {/* <Section> */}\n      {/* <Statistics /> */}\n      {/* </Section> */}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'modern-normalize/modern-normalize.css';\nimport './index.scss';\nimport App from './App';\n\n// var classNames = require('classnames');\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}