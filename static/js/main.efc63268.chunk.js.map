{"version":3,"sources":["components/Section/Section.js","components/Feedback/FeedbackOptions.js","components/Feedback/Statistics.js","components/Notification/Notification.js","App.js","index.js"],"names":["Section","children","FeedbackOptions","onGood","onNeutral","onBad","onHide","className","onClick","Statistics","good","neutral","bad","total","positivePercentage","onCountTotalFeedback","onCountPositiveFeedbackPercentage","Notification","state","visible","hide","setState","this","Component","App","props","initialValue","prevActualState","countTotalFeedback","e","countPositiveFeedbackPercentage","console","log","target","defaultProps","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4TAUeA,EAPC,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACd,kCAEGA,KC2BUC,G,MA9BS,SAAC,GAAD,IACtBC,EADsB,EACtBA,OACAC,EAFsB,EAEtBA,UACAC,EAHsB,EAGtBA,MAHsB,EAKtBC,OALsB,OAetB,gCACE,uDAEA,wBAAQC,UAAU,MAAMC,QAASL,EAAjC,kBAGA,wBAAQI,UAAU,MAAMC,QAASJ,EAAjC,qBAGA,wBAAQG,UAAU,MAAMC,QAASH,EAAjC,sBCOWI,G,MA/BI,SAAC,GAAD,IACjBC,EADiB,EACjBA,KACAC,EAFiB,EAEjBA,QACAC,EAHiB,EAGjBA,IACAC,EAJiB,EAIjBA,MAEAC,GANiB,EAKjBC,qBALiB,EAMjBD,oBANiB,EAOjBE,kCAPiB,OASjB,gCACE,4CAEA,qBAAIT,UAAU,OAAd,UACE,qBAAIA,UAAU,OAAd,mBAA4BG,KAC5B,qBAAIH,UAAU,OAAd,sBAA+BI,KAC/B,qBAAIJ,UAAU,OAAd,kBAA2BK,KAC3B,qBAAIL,UAAU,OAAd,oBAA6BM,KAC7B,qBAAIN,UAAU,OAAd,+BACqB,IAClBO,aCpBHG,E,4MACJC,MAAQ,CACNC,SAAS,G,EAGXC,KAAO,WACL,EAAKC,SAAS,CAAEF,SAAS,K,4CAG3B,WACE,OACE,qBAAKZ,UAAU,eAAf,SACGe,KAAKJ,MAAMC,SAEV,mBAAGZ,UAAU,wBAAb,qC,GAdiBgB,aAqBZN,ICZTO,G,kNAQJN,MAAQ,CACNR,KAAM,EAAKe,MAAMC,aACjBf,QAAS,EAAKc,MAAMC,aACpBd,IAAK,EAAKa,MAAMC,aAChBb,MAAO,EAAKY,MAAMC,aAClBZ,mBAAoB,EAAKW,MAAMC,c,EAIjChB,KAAO,WAEL,EAAKW,UAAS,SAAAM,GAAe,MAAK,CAChCjB,KAAMiB,EAAgBjB,KAAO,O,EAGjCC,QAAU,WACR,EAAKU,UAAS,SAAAM,GAAe,MAAK,CAChChB,QAASgB,EAAgBhB,QAAU,O,EAGvCC,IAAM,WACJ,EAAKS,UAAS,SAAAM,GACZ,MAAO,CAAEf,IAAKe,EAAgBf,IAAM,O,EAWxCgB,mBAAqB,SAAAC,GAGnB,EAAKR,UAAS,SAAAM,GACZ,MAAO,CAELd,MAAQc,EAAgBd,MACtBc,EAAgBjB,KAAOiB,EAAgBhB,QAAUgB,EAAgBf,S,EAOzEkB,gCAAkC,SAAAD,GAChCE,QAAQC,IAAIH,EAAEI,S,4CAGhB,WACE,OACE,gCACE,oBAAI1B,UAAU,kBAAd,sBAEA,cAAC,EAAD,UACE,cAAC,EAAD,CACEJ,OAAQmB,KAAKZ,KACbN,UAAWkB,KAAKX,QAChBN,MAAOiB,KAAKV,QAYhB,eAAC,EAAD,WACE,cAAC,EAAD,CACEF,KAAMY,KAAKJ,MAAMR,KACjBC,QAASW,KAAKJ,MAAMP,QACpBC,IAAKU,KAAKJ,MAAMN,IAEhBC,MAAOS,KAAKJ,MAAML,MAElBC,mBAAoBQ,KAAKJ,MAAMJ,qBAOjC,cAAC,EAAD,CAAcM,KAAME,KAAKF,iB,GA/FjBG,cAAZC,EACGU,aAAe,CACpBR,aAAc,GAoGHF,QCzGfW,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.efc63268.chunk.js","sourcesContent":["import React from 'react';\n\n// рендерит секцию с заголовком и детей (children)\nconst Section = ({ children }) => (\n  <section>\n    {/* <h2></h2> */}\n    {children}\n  </section>\n);\n\nexport default Section;\n\n{\n  /*  title = '' */\n}\n","import React from 'react';\nimport './feedbackOptions.scss';\n\nconst FeedbackOptions = ({\n  onGood,\n  onNeutral,\n  onBad,\n\n  onHide,\n\n  // options,\n  // onLeaveFeedback,\n\n  // onTotal,\n  // onCountTotalFeedback,\n  // onPositivePercentage,\n  // onCountPositiveFeedbackPercentage,\n}) => (\n  <div>\n    <h2>Please leave feedback</h2>\n\n    <button className=\"btn\" onClick={onGood /*, onHide*/}>\n      Good\n    </button>\n    <button className=\"btn\" onClick={onNeutral /*, onHide*/}>\n      Neutral\n    </button>\n    <button className=\"btn\" onClick={onBad /*, onHide*/}>\n      Bad\n    </button>\n  </div>\n);\n\nexport default FeedbackOptions;\n","import React from 'react';\nimport './statistics.scss';\n\nconst Statistics = ({\n  good,\n  neutral,\n  bad,\n  total,\n  onCountTotalFeedback,\n  positivePercentage,\n  onCountPositiveFeedbackPercentage,\n}) => (\n  <div>\n    <h2>Statistics</h2>\n\n    <ul className=\"list\">\n      <li className=\"item\">Good: {good}</li>\n      <li className=\"item\">Neutral: {neutral}</li>\n      <li className=\"item\">Bad: {bad}</li>\n      <li className=\"item\">Total: {total /*,onCountTotalFeedback*/}</li>\n      <li className=\"item\">\n        Positive feedback:{' '}\n        {positivePercentage /*, onCountPositiveFeedbackPercentage*/}\n      </li>\n    </ul>\n  </div>\n);\n\n// good={}\n// neutral = {}\n// bad = {}\n// total = {}\n// positivePercentage = {}\n\nexport default Statistics;\n","import { Component } from 'react';\n\nclass Notification extends Component {\n  state = {\n    visible: true,\n  };\n\n  hide = () => {\n    this.setState({ visible: false });\n  };\n\n  render() {\n    return (\n      <div className=\"notification\">\n        {this.state.visible && (\n          // <p className=\"notification__message\" onClick={this.hide}>\n          <p className=\"notification__message\">No feedback given</p>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default Notification;\n\n{\n  /*   message = 'No feedback given'; */\n}\n","// import React from 'react';\nimport { Component } from 'react';\n\nimport Section from 'components/Section/Section';\nimport FeedbackOptions from './components/Feedback/FeedbackOptions';\nimport Statistics from 'components/Feedback/Statistics';\nimport Notification from 'components/Notification/Notification';\n\nimport './sass/utils/visually-hidden.scss';\n\n// class Feedback extends React.Component {\nclass App extends Component {\n  static defaultProps = {\n    initialValue: 0,\n  };\n\n  // static propTypes = {};\n\n  // состояние. публичное свойство state. свойство экземпляра, всегда объект. от свойств этого объекта зависит разметка\n  state = {\n    good: this.props.initialValue,\n    neutral: this.props.initialValue,\n    bad: this.props.initialValue,\n    total: this.props.initialValue,\n    positivePercentage: this.props.initialValue,\n    // options:this.props.initialValue,\n  };\n\n  good = () => {\n    // prevActualState - ссылка на актуальное состояние на момент обновления, вызова этой функции\n    this.setState(prevActualState => ({\n      good: prevActualState.good + 1,\n    }));\n  };\n  neutral = () => {\n    this.setState(prevActualState => ({\n      neutral: prevActualState.neutral + 1,\n    }));\n  };\n  bad = () => {\n    this.setState(prevActualState => {\n      return { bad: prevActualState.bad + 1 };\n    });\n  };\n\n  // total = {}\n  // positivePercentage = {}\n  // options,\n  // onLeaveFeedback,\n\n  // подсчитывающие эти значения основываясь на данных в состоянии (вычисляемые данные)\n  // общего количества собранных отзывов из всех категорий\n  countTotalFeedback = e => {\n    // console.log(e.target);\n\n    this.setState(prevActualState => {\n      return {\n        // пушить в массив и рендерить от туда значение?\n        total: (prevActualState.total =\n          prevActualState.good + prevActualState.neutral + prevActualState.bad),\n        // total: (this.total = this.good + this.neutral + this.bad),\n      };\n    });\n  };\n\n  // процент положительных отзывов\n  countPositiveFeedbackPercentage = e => {\n    console.log(e.target);\n  };\n\n  render() {\n    return (\n      <div>\n        <h1 className=\"visually_hidden\">Feedback</h1>\n\n        <Section>\n          <FeedbackOptions\n            onGood={this.good}\n            onNeutral={this.neutral}\n            onBad={this.bad}\n            // options={},\n            // onLeaveFeedback={},\n            // onTotal={this.total}\n            // onCountTotalFeedback={this.countTotalFeedback}\n            // onPositivePercentage={this.positivePercentage}\n            // onCountPositiveFeedbackPercentage={\n            //   this.countPositiveFeedbackPercentage\n            // }\n          />\n        </Section>\n\n        <Section>\n          <Statistics\n            good={this.state.good}\n            neutral={this.state.neutral}\n            bad={this.state.bad}\n            // hide={this.hide}\n            total={this.state.total}\n            // onCountTotalFeedback={this.countTotalFeedback}\n            positivePercentage={this.state.positivePercentage}\n            // onCountPositiveFeedbackPercentage={\n            //   this.countPositiveFeedbackPercentage\n            // }\n          />\n\n          {/* hide в другом файле, как к нему обратиться, не через this */}\n          <Notification hide={this.hide} />\n        </Section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n// ---------------------------------------------------\n// метод класса\n// countPositiveFeedbackPercentage() {}-нет привязки контекста\n// публичное свойство и стрелка\n//   countPositiveFeedbackPercentage = () => {}\n\n//super-это вызов контсруктора родителя(React.Component), до того как использовать this внутри конструктора ребенка(this.state = {};)\n\n// компоненты одной сущности хранить в одной папке\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'modern-normalize/modern-normalize.css';\nimport './index.scss';\nimport App from './App';\n\n// var classNames = require('classnames');\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}