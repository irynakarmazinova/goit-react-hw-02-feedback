{"version":3,"sources":["components/Section/Section.js","components/Feedback/FeedbackOptions/FeedbackOptions.js","components/Feedback/Statistics/Statistics.js","components/Notification/Notification.js","App.js","index.js"],"names":["Section","title","children","className","FeedbackOptions","options","onLeaveFeedback","map","option","onClick","toUpperCase","slice","Statistics","good","neutral","bad","total","positivePercentage","Notification","message","App","state","leaveFeedback","e","targetBtn","target","textContent","toLowerCase","setState","prevState","countTotalFeedback","countPositiveFeedbackPercentage","Math","round","this","Object","keys","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0RAgBeA,EAZC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACd,0BAASC,UAAU,QAAnB,UACGF,EACAC,MCkBUE,EAtBS,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,gBAAZ,OACtB,8BACE,oBAAIH,UAAU,gBAAd,SACGE,EAAQE,KAAI,SAAAC,GAAM,OAGjB,aAFA,CAEA,MAAiBL,UAAU,gBAA3B,SACE,wBAAQA,UAAU,MAAMM,QAASH,EAAjC,SAEGE,EAAO,GAAGE,cAAgBF,EAAOG,MAAM,MAHnCH,WCgBFI,EAtBI,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,QAASC,EAAlB,EAAkBA,IAAKC,EAAvB,EAAuBA,MAAOC,EAA9B,EAA8BA,mBAA9B,OACjB,8BACE,qBAAId,UAAU,kBAAd,UACE,qBAAIA,UAAU,kBAAd,mBAAuCU,KACvC,qBAAIV,UAAU,kBAAd,sBAA0CW,KAC1C,qBAAIX,UAAU,kBAAd,kBAAsCY,KACtC,qBAAIZ,UAAU,kBAAd,oBAAwCa,KACxC,qBAAIb,UAAU,kBAAd,gCACsBc,EADtB,aCDSC,EANM,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OAAiB,mBAAGhB,UAAU,eAAb,SAA6BgB,KCM7DC,G,kNAQJC,MAAQ,CACNR,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPO,cAAgB,SAAAC,GACd,IAAMC,EAAYD,EAAEE,OAAOC,YAAYC,cAMvC,EAAKC,UAAS,SAAAC,GACZ,OAAO,eAAGL,EAAYK,EAAUL,GAAa,O,EAIjDM,mBAAqB,WACnB,MAA+B,EAAKT,MAIpC,OAJA,EAAQR,KAAR,EAAcC,QAAd,EAAuBC,K,EAOzBgB,gCAAkC,WAChC,MAA+B,EAAKV,MAA5BR,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,IAIvB,OADqBiB,KAAKC,MAAc,IAAPpB,GAAeA,EAAOC,EAAUC,KAAS,G,4CAI5E,WACE,MAA+BmB,KAAKb,MAA5BR,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,IAEvB,OACE,sBAAKZ,UAAU,YAAf,UACE,oBAAIA,UAAU,kBAAd,sBACA,cAAC,EAAD,CAASF,MAAM,wBAAf,SACE,cAAC,EAAD,CACEI,QAAS8B,OAAOC,KAAKF,KAAKb,OAC1Bf,gBAAiB4B,KAAKZ,kBAG1B,cAAC,EAAD,CAASrB,MAAM,aAAf,SACiC,IAA9BiC,KAAKJ,qBACJ,cAAC,EAAD,CAAcX,QAAQ,sBAEtB,cAAC,EAAD,CAEEN,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOkB,KAAKJ,qBACZb,mBAAoBiB,KAAKH,6C,GAhErBM,cAyEHjB,IC1EfkB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.5a3d5dde.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\n// рендерит секцию с заголовком и детей (children)\nconst Section = ({ title, children }) => (\n  <section className=\"title\">\n    {title}\n    {children}\n  </section>\n);\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.node,\n};\n\nexport default Section;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => (\n  <div>\n    <ul className=\"feedback_list\">\n      {options.map(option => (\n        // option - имя одного state`a\n        // для key не использовать index, только id\n        <li key={option} className=\"feedback_item\">\n          <button className=\"btn\" onClick={onLeaveFeedback}>\n            {/* {option.charAt(0).toUpperCase() + option.slice(1)} */}\n            {option[0].toUpperCase() + option.slice(1)}\n          </button>\n        </li>\n      ))}\n    </ul>\n  </div>\n);\n\nFeedbackOptions.propTypes = {\n  options: PropTypes.arrayOf(PropTypes.string.isRequired).isRequired,\n  onLeaveFeedback: PropTypes.func.isRequired,\n};\n\nexport default FeedbackOptions;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => (\n  <div>\n    <ul className=\"statistics_list\">\n      <li className=\"statistics_item\">Good: {good}</li>\n      <li className=\"statistics_item\">Neutral: {neutral}</li>\n      <li className=\"statistics_item\">Bad: {bad}</li>\n      <li className=\"statistics_item\">Total: {total}</li>\n      <li className=\"statistics_item\">\n        Positive feedback: {positivePercentage}%\n      </li>\n    </ul>\n  </div>\n);\n\nStatistics.propTypes = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  positivePercentage: PropTypes.number.isRequired,\n};\n\nexport default Statistics;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Notification = ({ message }) => <p className=\"notification\">{message}</p>;\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n\nexport default Notification;\n","import React, { Component } from 'react';\n\nimport Section from './components/Section';\nimport FeedbackOptions from './components/Feedback/FeedbackOptions';\nimport Statistics from './components/Feedback/Statistics';\nimport Notification from './components/Notification';\n\nimport './App.scss';\n\nclass App extends Component {\n  // static defaultProps = {\n  //   initialValue: 0,\n  // };\n\n  // static propTypes = {};\n\n  // состояние. публичное свойство state. свойство экземпляра, всегда объект. от свойств этого объекта зависит разметка\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  leaveFeedback = e => {\n    const targetBtn = e.target.textContent.toLowerCase();\n    // const targetBtn = e.target.textContent;\n    // const targetBtn = e.currentTarget;\n    // const targetBtn = e.target;\n\n    // prevActualState - ссылка на актуальное состояние на момент обновления, вызова этой функции\n    this.setState(prevState => {\n      return { [targetBtn]: prevState[targetBtn] + 1 };\n    });\n  };\n\n  countTotalFeedback = () => {\n    const { good, neutral, bad } = this.state;\n    let total = 0;\n\n    total = good + neutral + bad;\n    return total;\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    const { good, neutral, bad } = this.state;\n    let positivePercentage = 0;\n\n    positivePercentage = Math.round((good * 100) / (good + neutral + bad)) || 0;\n    return positivePercentage;\n  };\n\n  render() {\n    const { good, neutral, bad } = this.state;\n\n    return (\n      <div className=\"container\">\n        <h1 className=\"visually_hidden\">Feedback</h1>\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions\n            options={Object.keys(this.state)}\n            onLeaveFeedback={this.leaveFeedback}\n          />\n        </Section>\n        <Section title=\"Statistics\">\n          {this.countTotalFeedback() === 0 ? (\n            <Notification message=\"No feedback given\" />\n          ) : (\n            <Statistics\n              // поднятие состояния-от родителя вниз детей кидаются пропсы\n              good={good}\n              neutral={neutral}\n              bad={bad}\n              total={this.countTotalFeedback()}\n              positivePercentage={this.countPositiveFeedbackPercentage()}\n            />\n          )}\n        </Section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n// ---------------------------------------------------\n// метод класса\n// countPositiveFeedbackPercentage() {}-нет привязки контекста\n// публичное свойство и стрелка\n//   countPositiveFeedbackPercentage = () => {}\n\n// публичное свойство класса- - передать коллбек как обработчик события в эл делать публичн.свой.класса в которую закидую стрелку\n\n//super-это вызов контсруктора родителя(React.Component), до того как использовать this внутри конструктора ребенка(this.state = {};)\n\n// компоненты одной сущности хранить в одной папке\n\n// записать, не основываясь на предыдущем - объект\n// this.setState({value: 123123123})\n// записать основываясь на предыдущем - функция\n//  this.setState(prevState => {\n// return { value: prevState.value + 1 };\n// });\n// или\n// this.setState(prevState => ({\n// value: prevState.value + 1,\n// }));\n\n// массив объектов const colors =[{},{},{}]\n//  <FeedbackOptions options={colors}/>\n// в отдельном файле компонента что бы обратиться к options - this.props.options\n\n// делегирование встроено в реакт по умолчанию\n// onClick-это регистрация функции, при клики на кнопку. те addEventListener не вешается.\n\n// onClick={this.setActiveIdx(index)}-на это место будет возвращаен вызов функции-результат- те вернет undefind\n// onClick={() => this.setActiveIdx(index)}-вернут ссылку на функцию с индеком\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'modern-normalize/modern-normalize.css';\nimport './index.scss';\nimport App from './App';\n\n// var classNames = require('classnames');\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}