{"version":3,"sources":["components/Section/Section.js","components/Feedback/FeedbackOptions.js","components/Feedback/Statistics.js","components/Notification/Notification.js","App.js","index.js"],"names":["Section","title","children","className","FeedbackOptions","options","onLeaveFeedback","onClick","Statistics","good","neutral","bad","total","positivePercentage","Notification","message","App","state","setState","prevActualState","Object","keys","map","key","countTotalFeedback","countPositiveFeedbackPercentage","Math","round","this","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mRAUeA,EAPC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACd,0BAASC,UAAU,QAAnB,UACGF,EACAC,MCqBUE,EAzBS,SAAC,GAAD,IAKtBC,EALsB,EAKtBA,QALsB,EAMtBC,gBANsB,OAQtB,gCAEE,wBAAQH,UAAU,MAAMI,QAASF,EAAjC,kBAKA,wBAAQF,UAAU,MAAMI,QAASF,EAAjC,qBAIA,wBAAQF,UAAU,MAAMI,QAASF,EAAjC,qBCPWG,EAZI,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,QAASC,EAAlB,EAAkBA,IAAKC,EAAvB,EAAuBA,MAAOC,EAA9B,EAA8BA,mBAA9B,OACjB,8BACE,qBAAIV,UAAU,OAAd,UACE,qBAAIA,UAAU,OAAd,mBAA4BM,KAC5B,qBAAIN,UAAU,OAAd,sBAA+BO,KAC/B,qBAAIP,UAAU,OAAd,kBAA2BQ,KAC3B,qBAAIR,UAAU,OAAd,oBAA6BS,KAC7B,qBAAIT,UAAU,OAAd,gCAAyCU,EAAzC,aCLSC,EAFM,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OAAiB,mBAAGZ,UAAU,eAAb,SAA6BY,KCO7DC,G,kNAQJC,MAAQ,CACNR,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPF,KAAO,WAEL,EAAKS,UAAS,SAAAC,GAAe,MAAK,CAChCV,KAAMU,EAAgBV,KAAO,O,EAGjCC,QAAU,WACR,EAAKQ,UAAS,SAAAC,GAAe,MAAK,CAChCT,QAASS,EAAgBT,QAAU,O,EAGvCC,IAAM,WACJ,EAAKO,UAAS,SAAAC,GACZ,MAAO,CAAER,IAAKQ,EAAgBR,IAAM,O,EAIxCN,QAAU,WAIR,OAHae,OAAOC,KAAK,EAAKJ,OACbK,KAAI,SAAAC,GAAG,OAAIA,M,EAK9BjB,gBAAkB,a,EAalBkB,mBAAqB,WACnB,MAA+B,EAAKP,MAIpC,OAJA,EAAQR,KAAR,EAAcC,QAAd,EAAuBC,K,EAOzBc,gCAAkC,WAChC,MAA+B,EAAKR,MAA5BR,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,IAWvB,OADqBe,KAAKC,MAAc,IAAPlB,GAAeA,EAAOC,EAAUC,K,4CAInE,WACE,MAA+BiB,KAAKX,MAA5BR,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,IAEvB,OACE,gCACE,oBAAIR,UAAU,kBAAd,sBACA,cAAC,EAAD,CAASF,MAAM,wBAAf,SACE,cAAC,EAAD,CAIEI,QAASuB,KAAKvB,QACdC,gBAAiBsB,KAAKtB,oBAG1B,eAAC,EAAD,CAASL,MAAM,aAAf,UACE,cAAC,EAAD,CAEEQ,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOgB,KAAKJ,qBACZX,mBAAoBe,KAAKH,oCAGE,IAA5BG,KAAKJ,oBACJ,cAAC,EAAD,CAAcT,QAAQ,gC,GApGhBc,cA4GHb,IC7Gfc,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.d39c6e74.chunk.js","sourcesContent":["import React from 'react';\n\n// рендерит секцию с заголовком и детей (children)\nconst Section = ({ title, children }) => (\n  <section className=\"title\">\n    {title}\n    {children}\n  </section>\n);\n\nexport default Section;\n","import React from 'react';\n\nconst FeedbackOptions = ({\n  // onGood,\n  // onNeutral,\n  // onBad,\n\n  options,\n  onLeaveFeedback,\n}) => (\n  <div>\n    {/* <button className=\"btn\" onClick={onGood}> */}\n    <button className=\"btn\" onClick={options}>\n      {/* <button className=\"btn\" onClick={onLeaveFeedback}> */}\n      Good\n    </button>\n    {/* <button className=\"btn\" onClick={onNeutral}> */}\n    <button className=\"btn\" onClick={options}>\n      Neutral\n    </button>\n    {/* <button className=\"btn\" onClick={onBad}> */}\n    <button className=\"btn\" onClick={options}>\n      Bad\n    </button>\n  </div>\n);\n\nexport default FeedbackOptions;\n","import React from 'react';\n\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => (\n  <div>\n    <ul className=\"list\">\n      <li className=\"item\">Good: {good}</li>\n      <li className=\"item\">Neutral: {neutral}</li>\n      <li className=\"item\">Bad: {bad}</li>\n      <li className=\"item\">Total: {total}</li>\n      <li className=\"item\">Positive feedback: {positivePercentage}%</li>\n    </ul>\n  </div>\n);\n\nexport default Statistics;\n","import React from 'react';\n\nconst Notification = ({ message }) => <p className=\"notification\">{message}</p>;\n\nexport default Notification;\n","import React, { Component } from 'react';\n\nimport Section from 'components/Section/Section';\nimport FeedbackOptions from './components/Feedback/FeedbackOptions';\nimport Statistics from 'components/Feedback/Statistics';\nimport Notification from 'components/Notification/Notification';\n\nimport './App.scss';\n\nclass App extends Component {\n  // static defaultProps = {\n  //   initialValue: 0,\n  // };\n\n  // static propTypes = {};\n\n  // состояние. публичное свойство state. свойство экземпляра, всегда объект. от свойств этого объекта зависит разметка\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  good = () => {\n    // prevActualState - ссылка на актуальное состояние на момент обновления, вызова этой функции\n    this.setState(prevActualState => ({\n      good: prevActualState.good + 1,\n    }));\n  };\n  neutral = () => {\n    this.setState(prevActualState => ({\n      neutral: prevActualState.neutral + 1,\n    }));\n  };\n  bad = () => {\n    this.setState(prevActualState => {\n      return { bad: prevActualState.bad + 1 };\n    });\n  };\n\n  options = () => {\n    const keys = Object.keys(this.state);\n    const key = keys.map(key => key);\n    // const key = keys.map(key => `${key} : ${this.state[key]}`);\n    return key;\n  };\n\n  onLeaveFeedback = () => {\n    // const values = this.setState(prevActualState => {\n    //   const value = Object.values(this.state);\n    //   return { value: prevActualState.value + 1 };\n    // });\n    // console.log(values);\n    // return values;\n    // this.setState(prevActualState => {\n    //   return { this.options: prevActualState.this.options + 1 };\n    // });\n    // return this.options();\n  };\n\n  countTotalFeedback = () => {\n    const { good, neutral, bad } = this.state;\n    let total = 0;\n\n    total = good + neutral + bad;\n    return total;\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    const { good, neutral, bad } = this.state;\n    let positivePercentage = 0;\n\n    // if (positivePercentage === 0) {\n    //   return positivePercentage;\n    // } else {\n    //  positivePercentage = Math.round((good * 100) / (good + neutral + bad));\n    // return positivePercentage;\n    // }\n\n    positivePercentage = Math.round((good * 100) / (good + neutral + bad));\n    return positivePercentage;\n  };\n\n  render() {\n    const { good, neutral, bad } = this.state;\n\n    return (\n      <div>\n        <h1 className=\"visually_hidden\">Feedback</h1>\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions\n            // onGood={this.good}\n            // onNeutral={this.neutral}\n            // onBad={this.bad}\n            options={this.options}\n            onLeaveFeedback={this.onLeaveFeedback}\n          />\n        </Section>\n        <Section title=\"Statistics\">\n          <Statistics\n            // поднятие состояния-от родителя вниз детей кидаются пропсы\n            good={good}\n            neutral={neutral}\n            bad={bad}\n            total={this.countTotalFeedback()}\n            positivePercentage={this.countPositiveFeedbackPercentage()}\n          />\n\n          {this.countTotalFeedback === 0 && (\n            <Notification message=\"No feedback given\" />\n          )}\n        </Section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n// ---------------------------------------------------\n// метод класса\n// countPositiveFeedbackPercentage() {}-нет привязки контекста\n// публичное свойство и стрелка\n//   countPositiveFeedbackPercentage = () => {}\n\n// публичное свойство класса- - передать коллбек как обработчик события в эл делать публичн.свой.класса в которую закидую стрелку\n\n//super-это вызов контсруктора родителя(React.Component), до того как использовать this внутри конструктора ребенка(this.state = {};)\n\n// компоненты одной сущности хранить в одной папке\n\n// записать, не основываясь на предыдущем - объект\n// this.setState({value: 123123123})\n// записать основываясь на предыдущем - функция\n//  this.setState(prevActualState => {\n// return { value: prevActualState.value + 1 };\n// });\n// или\n// this.setState(prevActualState => ({\n// value: prevActualState.value + 1,\n// }));\n\n// массив объектов const colors =[{},{},{}]\n//  <FeedbackOptions options={colors}/>\n// в отдельном файле компонента что бы обратиться к options - this.props.options\n\n// делегирование встроено в реакт по умолчанию\n// onClick-это регистрация функции, при клики на кнопку. те addEventListener не вешается.\n\n// onClick={this.setActiveIdx(index)}-на это место будет возвращаен вызов функции-результат- те вернет undefind\n// onClick={() => this.setActiveIdx(index)}-вернут ссылку на функцию с индеком\n\n// -----------------\n// в options ты передаешь массив значений своих будущих кнопок, в onLeaveFeedback ты передаешь колбек для кнопок. массив значение будущих кнопок-Передаєш туди state i map-аєш його ключі, щоб кнопки були good, neutral і т.д.\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'modern-normalize/modern-normalize.css';\nimport './index.scss';\nimport App from './App';\n\n// var classNames = require('classnames');\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}